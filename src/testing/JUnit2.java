package testing;

import org.junit.jupiter.api.*;

public class JUnit2 {

//______________________________________________________________________________________________________________________

    @BeforeAll // Статичный метод. Запускается один раз перед всеми тестовымии методами в тестовом классе
    public static void beforeAll(){
        System.out.println("Before all Annotation");
        System.out.println();
    }

    @BeforeEach // НЕстатичный метод. Запускается перед каждым тестовым методом в тестовом классе
    public void beforeEach(){
        System.out.println("Before each Annotation");
    }

    @Test
    public void test1(){
        System.out.println("This is test");
    }

    @Test
    public void test2(){
        System.out.println("This is test");
    }

    @Test
    public void test3(){
        System.out.println("This is test");
    }

    @Test
    public void test4(){
        System.out.println("This is test");
    }

    @AfterAll //статичный метод. Запускается один раз после всех тестовых методов в тестовом классе
    public static void afterAll(){
        System.out.println("After all annotations");
    }

    @AfterEach //НЕСтатичный метод. Запускается после каждого тестового метода в тестовом классе
    public void afterEach(){
        System.out.println("After Each Annotation");
        System.out.println();
    }
}


/*SDLC этапы - Идея -> Требования -> Дизайн -> Разработка -> Тестирование -> Развёртывание -> Поддержка -> Выпуск
*
*       Smoke test - тестировка самых важных функционалов до углублённой тестировки.
*       Регрессионный тест - вид тестирования, направленное на обнаружение ошибок в уже протестированных участках исходного
* кода. Делается обычно после обновления ПО.
*       Нагрузочное тестирование - нефункциональное тестирование, которое проверяет производительность ПО/веб-сайтов
* при большой нагрузке.
*       Стрессовое тестирование - нефункциональное тестирование, производимое при условиях превышающих ожидаемых
* нагрузок.
*       Бэклог продукта — это перечень рабочих задач, расположенных в порядке важности, для команды разработчиков.
*
*       Верификация - это статическая практика проверки документов, дизайна, архитектуры, кода и т.д. Всегда проходит
* без запуска кода. Отвечает на вопрос "Делаем ли мы продукт правильно?"
* Включает в себя проверку Plans, Requirement Specifications, Design Specifications, Code, Test Cases,Check-Lists, etc.
*
*       Валидация - процесс оценки конечного продукта, необходимо проверить, соответсвует ли ПО ожиданиям и требованиям
* клиента. Включает в себя запуск кода программы
* Валидация использует методы, такие как тестирование Black Box, тестирование White Box и нефункциональное тестирование.
* Валидация отвечает на вопрос “Делаем ли мы правильный продукт?”
* Валидация проверяет, соответствует ли программное обеспечение требованиям и ожиданиям клиента.
* Валидация может найти ошибки, которые процесс Verification не может поймать.
* Валидация происходит после Verification.
* */























